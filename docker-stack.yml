
services:
  # API Gateway
  api-gateway:
    image: dwos/api-gateway:latest
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.role == worker
    networks:
      - dwos-network
    depends_on:
      - redis
      - rabbitmq
      - consul

  # Discord Bot Microservice
  discord-bot:
    image: dwos/discord-bot:latest
    environment:
      - SERVICE_NAME=discord-bot
      - SERVICE_PORT=8001
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
      - MONGODB_URL=mongodb://mongodb:27017
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      placement:
        constraints:
          - node.role == worker
    networks:
      - dwos-network
    depends_on:
      - rabbitmq
      - consul
      - mongodb

  # MongoDB
  mongodb:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_DATABASE=dwos
    volumes:
      - mongodb_data:/data/db
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network

  # Consul
  consul:
    image: hashicorp/consul:latest
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0
    volumes:
      - consul_data:/consul/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network
    depends_on:
      - prometheus

  # Traefik as Load Balancer
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - dwos-network

networks:
  dwos-network:
    driver: overlay
    attachable: true

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  consul_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local